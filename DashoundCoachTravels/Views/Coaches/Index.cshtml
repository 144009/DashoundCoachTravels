@model  DashoundCoachTravels.Models.CoachesViewModels
@using DashoundCoachTravels.Helpers
@using Microsoft.AspNet.Identity

@{
    ViewBag.Title = "Manage available vehicles";
}
<h1>@ViewBag.Title</h1>
<br />
<p class="text-success">@ViewBag.StatusMessage</p>
<br />

<div class="container">
    <div class="form-group">
        <div class="input-group">
            <span class="input-group-addon"><i class="glyphicon glyphicon-search"></i> </span>
            <input type="text" id="Search" placeholder="Vehicle name" class="form-control" /> <br />   
        </div>
        <br />
        <div class="input-group">
            <span class="input-group-addon"><i class="glyphicon glyphicon-search"></i> </span>
            <input type="text" id="SearchB" placeholder="more than x seats" class="form-control" />
            @if (UserRoleHelper.IsAdmin(User.Identity.GetUserId()))
            {
                <a href="@Url.Action("Create")" class="btn btn-default">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                    Add a new vehicle
                </a>
            }
        </div>
    </div>
</div>


@*
@using (Html.BeginForm("Index", "Coaches", FormMethod.Get))
{
    @Html.AntiForgeryToken()

    <div class="form-search">
        <hr />
        <div class="row">
            <div class="col-sm-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.VehModel, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.VehModel, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.VehModel, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">

                    @Html.LabelFor(model => model.Seats, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Seats, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Seats, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="col-sm-2">
                    <div class="form-group">

                        @Html.LabelFor(model => model.VehicleNumber, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.VehicleNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.VehicleNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

            <div class="form-group">
                <div class="col-sm-4">
                    <button type="submit" class="btn btn-default">
                        <i class="glyphicon glyphicon-search"></i> Search
                    </button>
                    @if (UserRoleHelper.IsAdmin(User.Identity.GetUserId()))
                    {
                        <a href="@Url.Action("Create")" class="btn btn-default">
                            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                            Add a new vehicle
                        </a>
                    }


                </div>
            </div>
        </div>
    </div>
}*@


<table class="table table-striped">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Brand)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.VehModel)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Seats)
        </th>
        @*<th>
                @Html.DisplayNameFor(model => model.DateAdded)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VehicleNumber)
            </th>*@
        <th>
            Vehicle Photo
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.List)
    {
        <tr id="Search" class="Search">
            <td>
                @Html.DisplayFor(modelItem => item.Brand)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.VehModel)
            </td>
            <td class="Number">
                @Html.DisplayFor(modelItem => item.Seats)
            </td>
            @*<td>
                    @{
                        string parameterValue = item.DateAdded.ToShortDateString();

                    }
                    @Html.DisplayFor(modelItem => parameterValue)
                </td
                <td>
                    @Html.DisplayFor(modelItem => item.VehicleNumber)
                </td>>*@
            <td>
                @if (!String.IsNullOrEmpty(item.VehScreenshot))
                {
                    <img src="@item.VehScreenshot" class="img-thumbnail" alt="Thumbnail" width="200" height="200">
                }
                else
                {
                    <img src="~/media/default.jpg" class="img-thumbnail" alt="Thumbnail" width="200" height="200">
                }


                @*Html.DisplayNameFor(model => model.VehScreenshot)*@
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }

</table>

<div>
    @Html.ActionLink("Back to list", "Index", "Manage", routeValues: null, htmlAttributes: new { })
</div>

<script type="text/javascript">
    $(document).ready(function () {
        function Contains(text_one, text_two) {
            if (text_one.indexOf(text_two) != -1) { return true; }
        }
        $("#Search").keyup(function () {
            var searchText = $("#Search").val().toLowerCase();
            $(".Search").each(function () {
                if (!Contains($(this).text().toLowerCase(), searchText)) {
                    $(this).hide();
                } else {
                    $(this).show();
                }
            });
            
        });
    })
</script>

<script type="text/javascript">
    $(document).ready(function () {
        function Contains(text_one, text_two) {
            if (parseInt(text_one) > parseInt(text_two)) { return true; }
        }
        $("#SearchB").keyup(function () {
            var searchText = $("#SearchB").val().toLowerCase();
            if (searchText != "") {
                $(".Number").each(function () {
                    if (!Contains($(this).text().toLowerCase(), searchText)) {
                        $(this).parents(".Search").hide();
                    } else {
                        $(this).parents(".Search").show();
                    }
                });
            }
        });
    })
</script>