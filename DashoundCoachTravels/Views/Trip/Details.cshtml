@model DashoundCoachTravels.Models.ViewEditTripsViewModel
@using DashoundCoachTravels.Helpers
@using Microsoft.AspNet.Identity

<section id="pages">
    <div class="container">
        <div class="row">
            <div class="col-xs-12">
                <div class="contents" id="mainOffer">
                    <div id="offerDetails">
                        <div class="offerWarp">
                            <h1 class="offerName">@Model.TripInstance.Name</h1>
                            <div class="offerNo">
                                <span class="numberWrap">
                                    Offer number: <b>@Model.TripInstance.Id</b>
                                </span>
                                <a href="@Url.Action("Index")" class="btn btn-default">
                                    <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
                                    Back to list
                                </a>
                            </div>
                            <div class="offerHeader">
                                <div class="offerImage">
                                    <div class="bigFotoWrap">
                                        @if (!String.IsNullOrEmpty(Model.TripInstance.Banner))
                                        {
                                            <img src="@Model.TripInstance.Banner" alt="Banner" id="ImageTripOffer">
                                        }
                                    </div>
                                </div>
                                <div class="offerInfo">
                                    <div class="bookingBtnWrap">
                                        <a href="@Url.Action("Index")" class="btn btn-success btn-lg">
                                            <span id="offerBtn" class="glyphicon glyphicon-shopping-cart" aria-hidden="true"></span>
                                            @Model.TripInstance.Price.ToString() PLN - Book!
                                        </a>
                                        @if (UserRoleHelper.IsAdmin(User.Identity.GetUserId()) || UserRoleHelper.IsEmployee(User.Identity.GetUserId()))
                                        {
                                            if (Model.NumberOfReservations == 0)
                                            {
                                                <a href="@Url.Action("Edit", new { thisTripId = Model.TripInstance.Id })" class="btn btn-info">
                                                    <span class="glyphicon glyphicon-edit" aria-hidden="true"></span>
                                                    Edit
                                                </a>
                                                <a href="@Url.Action("Delete", new { thisTripId = Model.TripInstance.Id })" class="btn btn-info">
                                                    <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                                                    Delete
                                                </a>
                                            }
                                            else
                                            {
                                                <p class="text-danger">Cannot edit a trip that has active reservations!</p>
                                            }
                                        }
                                    </div>
                                    <hr />
                                    @if (UserRoleHelper.IsAdmin(User.Identity.GetUserId()) || UserRoleHelper.IsEmployee(User.Identity.GetUserId()))
                                    {
                                        <strong>Number of reservations:</strong>
                                        <span>@Model.NumberOfReservations</span>
                                    }
                                    <strong>Coach:</strong>
                                    <span>@Model.CoachModel</span>
                                    <strong>Coach Picture:</strong>
                                    <span>
                                        @if (!String.IsNullOrEmpty(Model.CoachBanner))
                                        {
                                            <img src="@Model.CoachBanner" class="img-thumbnail" alt="Thumbnail" width="200" height="200">
                                        }
                                        else
                                        {
                                            <img src="~/media/default.jpg" class="img-thumbnail" alt="Thumbnail" width="200" height="200">
                                        }
                                    </span>
                                    <strong>Date:</strong>
                                    <span>@Model.TripInstance.DateDeparture.ToString("d") - @Model.TripInstance.DateBack.ToString("d")</span>
                                    <strong>Spots booked:</strong>
                                    <span>@Model.NumSpotsLeft.ToString() / @Model.TripInstance.NumSpots.ToString()</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="offerDescription">
                        <h3>Description</h3>
                        <div>
                            @if (!String.IsNullOrEmpty(Model.TripInstance.Description))
                            {
                                @Html.DisplayFor(model => model.TripInstance.Description)
                            }
                            else
                            {
                                <i>This trip has no description.</i>
                            }
                        </div>
                        <h3>Sightseeing plan</h3>
                        <div>
                            <ul class="list-group">
                                @if (Model.Route.ListElement != null)
                                {
                                    int n = 0;
                                    foreach (var location in Model.Route.ListElement)
                                    {
                                        ++n;
                                        <li class="list-group-item">@n.ToString(). @location.Name, @location.Town, @location.Country</li>
                                    }
                                }
                                else
                                {
                                    <li class="list-group-item">1. <i>No sublocations to visit</i></li>
                                }
                            </ul>
                        </div>
                        <h3>Trip map</h3>
                        <div>
                            @if (Model.Route.ListElement != null)
                            {
                                @* <img src="@("http://maps.google.com/maps/api/staticmap?size=640x320&scale=2&maptype=roadmap" + ViewBag.MapMarkers + "&key=YOUR_API_KEY")" class="img-responsive" alt="GoogleMap" width="1280" height="640"> *@
                                <img src="~/Media/sampleMap.jpg" class="img-responsive" alt="GoogleMap" width="1280" height="640">
                            }
                            else
                            {
                                <img src="~/Media/sampleMap.jpg" class="img-responsive" alt="GoogleMap" width="1280" height="640">
                            }
                        </div>
                        <h3>Take a closer look</h3>
                        <div>
                            <div id="mapid" style="width: 100%; min-height: 640px;"></div>
                        </div>
                    </div>
                </div>>
            </div>
        </div>
    </div>
</section>

<script>

    var GeoSearchControl = window.GeoSearch.GeoSearchControl;
    var OpenStreetMapProvider = window.GeoSearch.OpenStreetMapProvider;

    // remaining is the same as in the docs, accept for the var instead of const declarations
    var provider = new OpenStreetMapProvider();

    var searchControl = new GeoSearchControl({
        provider: provider
            .search('Rome', function (data) {
                console.log(data)
            }),
        showMarker: true,                                   // optional: true|false  - default true
        showPopup: true,                                   // optional: true|false  - default false
        marker: {                                           // optional: L.Marker    - default L.Icon.Default
            icon: new L.Icon.Default(),
            draggable: false,
        },
        popupFormat: ({ query, result }) => result.label,   // optional: function    - default returns result label
        maxMarkers: 1,                                      // optional: number      - default 1
        retainZoomLevel: false,                             // optional: true|false  - default false
        animateZoom: true,                                  // optional: true|false  - default true
        autoClose: false,                                   // optional: true|false  - default false
        searchLabel: 'Enter address',                       // optional: string      - default 'Enter address'
        keepResult: false                                   // optional: true|false  - default false
    });


    // https://wiki.openstreetmap.org/wiki/Deploying_your_own_Slippy_Map
    // https://switch2osm.org/using-tiles/getting-started-with-leaflet/

    // set up the map
    var map = new L.Map('mapid');

    // create the tile layer with correct attribution
    var osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
    var osmAttrib = 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors';
    var osm = new L.TileLayer(osmUrl, { minZoom: 8, maxZoom: 12, attribution: osmAttrib });



    // start the map in South-East England
    map.setView(new L.LatLng(51.3, 0.7), 9);
    var marker = L.marker([51.5, -0.09]).addTo(map);
    map.addControl(searchControl);
    map.addLayer(osm);



</script>
